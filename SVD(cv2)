WHITE & BLACK IMAGE

# Import necessary libraries
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Load the image (replace the path with your image file)
image = cv2.imread('imagesbmw.jpg')

# Convert the image to grayscale using cv2 (OpenCV loads images in BGR by default)
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Perform SVD on the image matrix
U, S, Vt = np.linalg.svd(gray_image, full_matrices=False)

# To visualize the decomposed matrices, we will look at the shapes of U, S, and Vt
print(f'U shape: {U.shape}')
print(f'S shape: {S.shape}')
print(f'Vt shape: {Vt.shape}')

# To reconstruct the image from the SVD components, we can multiply them
reconstructed_image = np.dot(U, np.dot(np.diag(S), Vt))

# Plot the original and reconstructed image
fig, ax = plt.subplots(1, 2, figsize=(10, 5))

# Display the original image
ax[0].imshow(gray_image, cmap='gray')
ax[0].set_title("Original Image")
ax[0].axis('off')

# Display the reconstructed image
ax[1].imshow(reconstructed_image, cmap='gray')
ax[1].set_title("Reconstructed Image from SVD")
ax[1].axis('off')

plt.show()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

COLOR IMAGE

# Import necessary libraries
import numpy as np
import cv2
import matplotlib.pyplot as plt

# Load the image (replace the path with your image file)
image = cv2.imread('imagesbmw.jpg')

# Convert the image to RGB (OpenCV loads images in BGR by default)
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Split the image into its three color channels: R, G, B
R = image_rgb[:, :, 0]
G = image_rgb[:, :, 1]
B = image_rgb[:, :, 2]

# Perform SVD on each color channel
U_R, S_R, Vt_R = np.linalg.svd(R, full_matrices=False)
U_G, S_G, Vt_G = np.linalg.svd(G, full_matrices=False)
U_B, S_B, Vt_B = np.linalg.svd(B, full_matrices=False)

# To reconstruct the image from the SVD components of each channel, we can multiply them
R_reconstructed = np.dot(U_R, np.dot(np.diag(S_R), Vt_R))
G_reconstructed = np.dot(U_G, np.dot(np.diag(S_G), Vt_G))
B_reconstructed = np.dot(U_B, np.dot(np.diag(S_B), Vt_B))

# Stack the reconstructed channels back into a color image
reconstructed_image_rgb = np.stack((R_reconstructed, G_reconstructed, B_reconstructed), axis=-1)

# Clip values to be in the valid range for image display (0 to 255)
reconstructed_image_rgb = np.clip(reconstructed_image_rgb, 0, 255).astype(np.uint8)

# Plot the original and reconstructed color image
fig, ax = plt.subplots(1, 2, figsize=(10, 5))

# Display the original image
ax[0].imshow(image_rgb)
ax[0].set_title("Original Image")
ax[0].axis('off')

# Display the reconstructed image
ax[1].imshow(reconstructed_image_rgb)
ax[1].set_title("Reconstructed Image from SVD")
ax[1].axis('off')

plt.show()
